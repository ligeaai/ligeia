version: "3.8"
services:
  frontend:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./dockerfile/local/frontend/Dockerfile
    container_name: ligeiaai-frontend-1
    env_file:
      - .env
    volumes:
      - ./:/frontend:delegated
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - net
  django:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./dockerfile/local/django/Dockerfile
    command: /start
    container_name: ligeiaai-django-1
    env_file:
      - .env
    volumes:
      - .:/django
      # - static_volume:/django/staticfiles
      # - media_volume:/django/mediafiles
    depends_on:
      - redis
      - postgres
      - es
    ports:
      - "8000:8000"
    networks:
      - net
  couchserver:
    image: couchdb
    restart: always
    container_name: ligeiaai-couchserver-1
    ports:
      - "5984:5984"
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    volumes:
      - couch-data:/opt/couchdb/data
  es:
    image: elasticsearch:8.4.2
    container_name: ligeiaai-es-1
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
  postgres:
    restart: unless-stopped
    image: postgres:latest
    container_name: ligeiaai-postgres-1
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    # env_file:
    #   - .env
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_DB=${PG_DB}
    ports:
      - "5434:5432"
    networks:
      - net
  pgadmin:
    restart: on-failure
    image: dpage/pgadmin4:latest
    container_name: ligeiaai-pgadmin-1
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASS}
    ports:
      - "5050:80"
    networks:
      - net
  redis:
    restart: on-failure
    image: redis:latest
    container_name: ligeiaai-redis-1
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - net
  zookeeper:
    image: confluentinc/cp-zookeeper:5.3.1
    hostname: zookeeper
    container_name: ligeiaai-zookeeper-1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - net

  apache-kafka-broker1:
    image: confluentinc/cp-enterprise-kafka:5.3.1
    hostname: broker
    container_name: ligeiaai-apache-kafka-broker-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - net
networks:
  net:
    driver: bridge
volumes:
  postgres-data: null
  pgadmin-data: null
  redis-data: null
  couch-data: null
