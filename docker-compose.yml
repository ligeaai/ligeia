version: "3.8"
services:
  # web:
  #   restart: on-failure
  #   build:
  #     context: .
  #     dockerfile: ./docker/local/web/Dockerfile
  #   volumes:
  #     - .:/web
  #   # - /web/node_modules
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - net
  django:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./dockerfile/local/django/Dockerfile
    command: /start
    env_file:
      - .env
    volumes:
      - .:/django
      # - static_volume:/django/staticfiles
      # - media_volume:/django/mediafiles
    depends_on:
      - redis
      - postgres
    ports:
      - "8000:8000"
    networks:
      - net
  postgres:
    restart: unless-stopped
    image: postgres:latest
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    # env_file:
    #   - .env
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_DB=${PG_DB}
    ports:
      - "5434:5432"
    networks:
      - net
  pgadmin:
    restart: on-failure
    image: dpage/pgadmin4:latest
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASS}
    ports:
      - "5050:80"
    networks:
      - net
  redis:
    restart: on-failure
    image: redis:latest
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - net
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - net
  broker:
    image: confluentinc/cp-server:6.2.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - net
  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8082:8082"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8082
    networks:
      - net
  control-center:
    image: confluentinc/cp-enterprise-control-center:6.2.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8082"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - net

  connect:
    image: docker.io/debezium/connect:latest
    container_name: connect
    hostname: connect
    expose:
      - 8081
      - 8083
    ports:
      - "8081:8081"
      - "8083:8083"
    volumes:
      - 'connect_data:/kafka/connect'
    networks:
      - net
    environment:
      - BOOTSTRAP_SERVERS=broker:29092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=connect-cassandra-config
      - OFFSET_STORAGE_TOPIC=connect-cassandra-offset
      - KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
      - ADVERTISED_HOST_NAME=connect
      - ADVERTISED_PORT=8081
    depends_on:
      - broker
      - zookeeper

  cassandra:
    container_name: cassandra
    hostname: 'cassandra'
    image: docker.io/bitnami/cassandra:4.0
    expose:
      - 7000
      - 9042
    ports:
      - '7000:7000'
      - '9042:9042'
    volumes:
      - 'cassandra_data:/bitnami'
    environment:
      - CASSANDRA_SEEDS=cassandra
      - CASSANDRA_DC=DC1
      - CASSANDRA_RACK=rack1
    networks:
      - net
    depends_on:
      - broker
      - zookeeper
networks:
  net:
    driver: bridge
volumes:
  postgres-data: null
  pgadmin-data: null
  redis-data: null
  mongodb-data: null
  zookeeper_data:
    driver: local
  broker_data:
    driver: local
  cassandra_data:
    driver: local
  connect_data:
    driver: local
  # celery_worker:
  #   restart: on-failure
  #   build:
  #     context: .
  #     dockerfile: ./docker/local/django/Dockerfile
  #   command: /start-celeryworker
  #   volumes:
  #     - .:/django
  #   env_file:
  #     - .env
  #   depends_on:
  #     - redis
  #     - postgres
  #   networks:
  #     - net
  # flower:
  #   build:
  #     context: .
  #     dockerfile: ./docker/local/django/Dockerfile
  #   command: /start-flower
  #   volumes:
  #     - .:/django
  #   env_file:
  #     - .env
  #   ports:
  #     - "5557:5555"
  #   depends_on:
  #     - redis
  #     - postgres
  #   networks:
  #     - net

  # # mongodb:
  # #   restart: unless-stopped
  # #   image: mongo:latest
  # #   volumes:
  # #     - mongodb-data:/data/db
  # #     - mongodb-data:/data/configdb
  # #   environment:
  # #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
  # #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
  # #   ports:
  # #     - "27017:27017"
  # #   networks:
  # #     - net
