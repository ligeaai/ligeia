version: "3.8"

services:
  app:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
      args:
        # Update 'VARIANT' to pick a version of Python: 3, 3.10, 3.9, 3.8, 3.7, 3.6
        # Append -bullseye or -buster to pin to an OS version.
        # Use -bullseye variants on local arm64/Apple Silicon.
        VARIANT: 3.10-buster
        # Optional Node.js version to install
        NODE_VERSION: "lts/*"

    volumes:
      - ..:/workspace:cached

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity

    # Runs app on the same network as the database container, allows "forwardPorts" in devcontainer.json function.
    network_mode: service:db
    # Uncomment the next line to use a non-root user for all processes.
    # user: vscode

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)
    # networks:
    #   - net
  db:
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: db_dev
      POSTGRES_PASSWORD: manager
    # Add "forwardPorts": ["5432"] to **devcontainer.json** to forward PostgreSQL locally.

    # (Adding the "ports" property to this file will not forward from a Codespace.)
    networks:
      - net
  pgadmin:
    restart: always
    container_name: ligeia_pgadmin4
    image: dpage/pgadmin4
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASS}
    ports:
      - "5050:80"
    networks:
      - net
  redis:
    image: redis:5-alpine
    restart: on-failure
    volumes:
      - redis-data:/data
    ports:
      - 5432:5432
    # network_mode: service:db
    networks:
      - net
  celery_worker:
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    command: /start-celeryworker
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres-db
    networks:
      - estate-react
  flower:
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    command: /start-flower
    volumes:
      - .:/app
    env_file:
      - .env
    ports:
      - 5557:5555
    depends_on:
      - redis
      - db
    networks:
      - net
  mongodb:
    image: mongo:latest
    volumes:
      - mongodb-data:/data
    ports:
      - 27017:27017
    networks:
      - net
  # mongo-express:
  #   image: mongo-express:latest
  #   volumes:
  #     - mongodb-data:/data
  #   ports:
  #     - 8081:8081
  #   networks:
  #     - net
  rabbitmq:
    image: rabbitmq:3.6-management-alpine
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      # The location of the RabbitMQ server.  "amqp" is the protocol;
      # "rabbitmq" is the hostname.  Note that there is not a guarantee
      # that the server will start first!  Telling the pika client library
      # to try multiple times gets around this ordering issue.
      AMQP_URL: "amqp://rabbitmq?connection_attempts=5&retry_delay=5"
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    ports:
      # The standard AMQP protocol port
      - 5672:5672
      # HTTP management UI
      - 15672:15672
    networks:
      - net

networks:
  net:
    driver: bridge
volumes:
  redis-data: null
  postgres-data: null
  pgadmin-data: null
  mongodb-data: null
  rabbitmq-data: null
