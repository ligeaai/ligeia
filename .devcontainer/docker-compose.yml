version: "3.8"

services:
  # web:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     args:
  #       # Update 'VARIANT' to pick an LTS version of Node.js: 18, 16, 14.
  #       # Append -bullseye or -buster to pin to an OS version.
  #       # Use -bullseye variants on local arm64/Apple Silicon.
  #       VARIANT: "18"

  #   volumes:
  #     - ..:/workspace:cached

  #   # Overrides default command so things don't shut down after the process ends.
  #   command: sleep infinity

  #   # Runs app on the same network as the database container, allows "forwardPorts" in devcontainer.json function.
  #   networks:
  #     - net
  #   # Uncomment the next line to use a non-root user for all processes.
  #   # user: node

  #   # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
  #   # (Adding the "ports" property to this file will not forward from a Codespace.)
  django:
    restart: unless-stopped
    build:
      context: ..
      dockerfile: ./dockerfile/dev/django/Dockerfile
    command: /start
    env_file:
      - .env
    volumes:
      - .:/django
      # - static_volume:/django/staticfiles
      # - media_volume:/django/mediafiles
    depends_on:
      - redis
      - postgresdb
    ports:
      - "8000:8000"
    networks:
      - net
  postgresdb:
    restart: unless-stopped
    image: postgres:latest
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    # env_file:
    #   - .env
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_DB=${PG_DB}
    ports:
      - "5434:5432"
    networks:
      - net
  pgadmin:
    restart: always
    image: dpage/pgadmin4:latest
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASS}
    ports:
      - "5050:80"
    networks:
      - net
  redis:
    restart: always
    image: redis:latest
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - net
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:6.1.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - net
networks:
  net:
    driver: bridge

volumes:
  postgres-data: null
  pgadmin-data: null
  redis-data: null
  mongodb-data: null
